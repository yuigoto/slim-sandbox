<?php
namespace YX\Entity;

use Doctrine\ORM\Mapping\Column;
use Doctrine\ORM\Mapping\GeneratedValue;
use Doctrine\ORM\Mapping\Id;
use Doctrine\ORM\Mapping\PrePersist;
use Doctrine\ORM\Mapping\PreUpdate;
use Ramsey\Uuid\Exception\UnsatisfiedDependencyException;
use Ramsey\Uuid\Uuid;
use YX\Core\Mappable;

/**
 * YX\Entity\BaseEntity
 * ----------------------------------------------------------------------
 * Base entity.
 *
 * Entities from the application should extend from this class, since it
 * provides common basic fields all entities must have, like the ID, creation
 * and update dates and a soft-delete status.
 *
 * Inherits its serializable properties from `YX\Core\Mappable`.
 *
 * The idea behind these base type entities is to avoid declaring long
 * entities by breaking them and chain-extending them.
 *
 * @package     YX\Entity
 * @author      Fabio Y. Goto <lab@yuiti.com.br>
 * @since       0.0.1
 */
class BaseEntity extends Mappable
{
    // Protected Properties
    // ------------------------------------------------------------------
    
    /**
     * Primary key, numeric and unique.
     *
     * @var int
     * @Id
     * @Column(type="integer")
     * @GeneratedValue
     */
    protected $id;
    
    /**
     * Global Unique Identifier (GUID), serves as secondary key and it's
     * generated by lifecycle methods.
     *
     * Users should not be able to edit/set this.
     *
     * @var string
     * @Column(type="guid",unique=true)
     */
    protected $uuid;
    
    /**
     * Entry creation date.
     *
     * @var string
     * @Column(type="datetime")
     */
    protected $created_at;
    
    /**
     * Entry update date.
     *
     * @var string
     * @Column(type="datetime")
     */
    protected $updated_at;
    
    /**
     * Soft delete status, for cases where we want to keep the data or where
     * the user shouldn't be able to delete things completely without approval.
     *
     * Mostly used for internal data, as users should ALWAYS be allowed to
     * wipe their own provided information.
     *
     * @var bool
     * @Column(type="boolean",nullable=false)
     */
    protected $delete = false;
    
    // Getters
    // ------------------------------------------------------------------
    
    /**
     * Retrieves the ID.
     *
     * @return int
     */
    public function getId(): int
    {
        return $this->id;
    }
    
    /**
     * Retrieves the UUID.
     *
     * @return string
     */
    public function getUuid(): string
    {
        return $this->uuid;
    }
    
    /**
     * Retrieves creation date.
     *
     * @return string
     */
    public function getCreatedAt(): string
    {
        return $this->created_at;
    }
    
    /**
     * Retrieves update date.
     *
     * @return string
     */
    public function getUpdatedAt(): string
    {
        return $this->updated_at;
    }
    
    /**
     * Retrieves soft delete status.
     *
     * @return bool
     */
    public function getDelete(): bool
    {
        return $this->delete;
    }
    
    // Setters
    // ------------------------------------------------------------------
    
    /**
     * Sets the soft delete status.
     *
     * @param bool $delete
     * @return $this
     */
    public function setDelete( bool $delete )
    {
        $this->delete = $delete;
        return $this;
    }
    
    /**
     * Toggles soft delete status.
     *
     * @return $this
     */
    public function toggleDelete()
    {
        $this->delete = ! $this->delete;
        return $this;
    }
    
    // Protected Setters
    // ------------------------------------------------------------------
    
    /**
     * Sets creation date.
     *
     * @param \DateTime $created_at
     * @return $this
     */
    public function setCreatedAt( \DateTime $created_at )
    {
        $this->created_at = $created_at;
        return $this;
    }
    
    /**
     * Sets update date.
     *
     * @param \DateTime $updated_at
     * @return $this
     */
    public function setUpdatedAt( \DateTime $updated_at )
    {
        $this->updated_at = $updated_at;
        return $this;
    }
    
    // Lifecycle Callbacks
    // ------------------------------------------------------------------
    
    /**
     * Runs only when inserting data, defines a random UUID for this entity.
     *
     * @return void
     * @throws \Exception
     * @PrePersist
     */
    public function defineUuid()
    {
        try {
            $this->uuid = Uuid::uuid4();
        } catch ( \Exception $e ) {
            throw new UnsatisfiedDependencyException(
                $e->getMessage(),
                $e->getCode(),
                $e
            );
        }
    }
    
    /**
     * Sets the creation and update.
     *
     * @return void
     * @PrePersist
     * @PreUpdate
     */
    public function updateTimestamps()
    {
        $this->setUpdatedAt( new \DateTime( 'now' ) );
        if ( $this->getCreatedAt() === null ) {
            $this->setCreatedAt( new \DateTime( 'now' ) );
        }
    }
}
